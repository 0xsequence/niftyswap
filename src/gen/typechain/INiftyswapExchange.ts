/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface INiftyswapExchangeInterface extends utils.Interface {
  functions: {
    "getBuyPrice(uint256,uint256,uint256)": FunctionFragment;
    "getCurrencyInfo()": FunctionFragment;
    "getCurrencyReserves(uint256[])": FunctionFragment;
    "getFactoryAddress()": FunctionFragment;
    "getPrice_currencyToToken(uint256[],uint256[])": FunctionFragment;
    "getPrice_tokenToCurrency(uint256[],uint256[])": FunctionFragment;
    "getSellPrice(uint256,uint256,uint256)": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "getTotalSupply(uint256[])": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrencyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrencyReserves",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice_currencyToToken",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice_tokenToCurrency",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrencyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrencyReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice_currencyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice_tokenToCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;

  events: {
    "CurrencyPurchase(address,address,uint256[],uint256[],uint256[])": EventFragment;
    "LiquidityAdded(address,uint256[],uint256[],uint256[])": EventFragment;
    "LiquidityRemoved(address,uint256[],uint256[],uint256[])": EventFragment;
    "TokensPurchase(address,address,uint256[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurrencyPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensPurchase"): EventFragment;
}

export type CurrencyPurchaseEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber[]],
  {
    buyer: string;
    recipient: string;
    tokensSoldIds: BigNumber[];
    tokensSoldAmounts: BigNumber[];
    currencyBoughtAmounts: BigNumber[];
  }
>;

export type CurrencyPurchaseEventFilter = TypedEventFilter<CurrencyPurchaseEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber[]],
  {
    provider: string;
    tokenIds: BigNumber[];
    tokenAmounts: BigNumber[];
    currencyAmounts: BigNumber[];
  }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber[]],
  {
    provider: string;
    tokenIds: BigNumber[];
    tokenAmounts: BigNumber[];
    currencyAmounts: BigNumber[];
  }
>;

export type LiquidityRemovedEventFilter = TypedEventFilter<LiquidityRemovedEvent>;

export type TokensPurchaseEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber[]],
  {
    buyer: string;
    recipient: string;
    tokensBoughtIds: BigNumber[];
    tokensBoughtAmounts: BigNumber[];
    currencySoldAmounts: BigNumber[];
  }
>;

export type TokensPurchaseEventFilter = TypedEventFilter<TokensPurchaseEvent>;

export interface INiftyswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INiftyswapExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBuyPrice(
      _assetBoughtAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    getCurrencyReserves(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getPrice_currencyToToken(
      _ids: BigNumberish[],
      _tokensBought: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPrice_tokenToCurrency(
      _ids: BigNumberish[],
      _tokensSold: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSellPrice(
      _assetSoldAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getTotalSupply(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBuyPrice(
    _assetBoughtAmount: BigNumberish,
    _assetSoldReserve: BigNumberish,
    _assetBoughtReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>;

  getCurrencyReserves(
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFactoryAddress(overrides?: CallOverrides): Promise<string>;

  getPrice_currencyToToken(
    _ids: BigNumberish[],
    _tokensBought: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPrice_tokenToCurrency(
    _ids: BigNumberish[],
    _tokensSold: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSellPrice(
    _assetSoldAmount: BigNumberish,
    _assetSoldReserve: BigNumberish,
    _assetBoughtReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  getTotalSupply(
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBuyPrice(
      _assetBoughtAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    getCurrencyReserves(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFactoryAddress(overrides?: CallOverrides): Promise<string>;

    getPrice_currencyToToken(
      _ids: BigNumberish[],
      _tokensBought: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPrice_tokenToCurrency(
      _ids: BigNumberish[],
      _tokensSold: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSellPrice(
      _assetSoldAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    getTotalSupply(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CurrencyPurchase(address,address,uint256[],uint256[],uint256[])"(
      buyer?: string | null,
      recipient?: string | null,
      tokensSoldIds?: null,
      tokensSoldAmounts?: null,
      currencyBoughtAmounts?: null
    ): CurrencyPurchaseEventFilter;
    CurrencyPurchase(
      buyer?: string | null,
      recipient?: string | null,
      tokensSoldIds?: null,
      tokensSoldAmounts?: null,
      currencyBoughtAmounts?: null
    ): CurrencyPurchaseEventFilter;

    "LiquidityAdded(address,uint256[],uint256[],uint256[])"(
      provider?: string | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      provider?: string | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,uint256[],uint256[],uint256[])"(
      provider?: string | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      provider?: string | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityRemovedEventFilter;

    "TokensPurchase(address,address,uint256[],uint256[],uint256[])"(
      buyer?: string | null,
      recipient?: string | null,
      tokensBoughtIds?: null,
      tokensBoughtAmounts?: null,
      currencySoldAmounts?: null
    ): TokensPurchaseEventFilter;
    TokensPurchase(
      buyer?: string | null,
      recipient?: string | null,
      tokensBoughtIds?: null,
      tokensBoughtAmounts?: null,
      currencySoldAmounts?: null
    ): TokensPurchaseEventFilter;
  };

  estimateGas: {
    getBuyPrice(
      _assetBoughtAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrencyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrencyReserves(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice_currencyToToken(
      _ids: BigNumberish[],
      _tokensBought: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice_tokenToCurrency(
      _ids: BigNumberish[],
      _tokensSold: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      _assetSoldAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSupply(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBuyPrice(
      _assetBoughtAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrencyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrencyReserves(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice_currencyToToken(
      _ids: BigNumberish[],
      _tokensBought: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice_tokenToCurrency(
      _ids: BigNumberish[],
      _tokensSold: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPrice(
      _assetSoldAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSupply(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
