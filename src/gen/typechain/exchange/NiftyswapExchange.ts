/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace INiftyswapExchange {
  export type LiquidityRemovedEventObjStruct = {
    currencyAmount: PromiseOrValue<BigNumberish>
    soldTokenNumerator: PromiseOrValue<BigNumberish>
    boughtCurrencyNumerator: PromiseOrValue<BigNumberish>
    totalSupply: PromiseOrValue<BigNumberish>
  }

  export type LiquidityRemovedEventObjStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    currencyAmount: BigNumber
    soldTokenNumerator: BigNumber
    boughtCurrencyNumerator: BigNumber
    totalSupply: BigNumber
  }
}

export interface NiftyswapExchangeInterface extends utils.Interface {
  functions: {
    'balanceOf(address,uint256)': FunctionFragment
    'balanceOfBatch(address[],uint256[])': FunctionFragment
    'getBuyPrice(uint256,uint256,uint256)': FunctionFragment
    'getCurrencyInfo()': FunctionFragment
    'getCurrencyReserves(uint256[])': FunctionFragment
    'getFactoryAddress()': FunctionFragment
    'getPrice_currencyToToken(uint256[],uint256[])': FunctionFragment
    'getPrice_tokenToCurrency(uint256[],uint256[])': FunctionFragment
    'getSellPrice(uint256,uint256,uint256)': FunctionFragment
    'getTokenAddress()': FunctionFragment
    'getTotalSupply(uint256[])': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'getBuyPrice'
      | 'getCurrencyInfo'
      | 'getCurrencyReserves'
      | 'getFactoryAddress'
      | 'getPrice_currencyToToken'
      | 'getPrice_tokenToCurrency'
      | 'getSellPrice'
      | 'getTokenAddress'
      | 'getTotalSupply'
      | 'isApprovedForAll'
      | 'onERC1155BatchReceived'
      | 'onERC1155Received'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'supportsInterface'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getBuyPrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getCurrencyInfo', values?: undefined): string
  encodeFunctionData(functionFragment: 'getCurrencyReserves', values: [PromiseOrValue<BigNumberish>[]]): string
  encodeFunctionData(functionFragment: 'getFactoryAddress', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getPrice_currencyToToken',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getPrice_tokenToCurrency',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getSellPrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getTokenAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'getTotalSupply', values: [PromiseOrValue<BigNumberish>[]]): string
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBuyPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrencyInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrencyReserves', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFactoryAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPrice_currencyToToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPrice_tokenToCurrency', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSellPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTokenAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTotalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC1155BatchReceived', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC1155Received', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment
    'CurrencyPurchase(address,address,uint256[],uint256[],uint256[])': EventFragment
    'LiquidityAdded(address,uint256[],uint256[],uint256[])': EventFragment
    'LiquidityRemoved(address,uint256[],uint256[],tuple[])': EventFragment
    'TokensPurchase(address,address,uint256[],uint256[],uint256[])': EventFragment
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CurrencyPurchase'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LiquidityAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LiquidityRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokensPurchase'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
}

export interface ApprovalForAllEventObject {
  _owner: string
  _operator: string
  _approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface CurrencyPurchaseEventObject {
  buyer: string
  recipient: string
  tokensSoldIds: BigNumber[]
  tokensSoldAmounts: BigNumber[]
  currencyBoughtAmounts: BigNumber[]
}
export type CurrencyPurchaseEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber[]],
  CurrencyPurchaseEventObject
>

export type CurrencyPurchaseEventFilter = TypedEventFilter<CurrencyPurchaseEvent>

export interface LiquidityAddedEventObject {
  provider: string
  tokenIds: BigNumber[]
  tokenAmounts: BigNumber[]
  currencyAmounts: BigNumber[]
}
export type LiquidityAddedEvent = TypedEvent<[string, BigNumber[], BigNumber[], BigNumber[]], LiquidityAddedEventObject>

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>

export interface LiquidityRemovedEventObject {
  provider: string
  tokenIds: BigNumber[]
  tokenAmounts: BigNumber[]
  details: INiftyswapExchange.LiquidityRemovedEventObjStructOutput[]
}
export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], INiftyswapExchange.LiquidityRemovedEventObjStructOutput[]],
  LiquidityRemovedEventObject
>

export type LiquidityRemovedEventFilter = TypedEventFilter<LiquidityRemovedEvent>

export interface TokensPurchaseEventObject {
  buyer: string
  recipient: string
  tokensBoughtIds: BigNumber[]
  tokensBoughtAmounts: BigNumber[]
  currencySoldAmounts: BigNumber[]
}
export type TokensPurchaseEvent = TypedEvent<[string, string, BigNumber[], BigNumber[], BigNumber[]], TokensPurchaseEventObject>

export type TokensPurchaseEventFilter = TypedEventFilter<TokensPurchaseEvent>

export interface TransferBatchEventObject {
  _operator: string
  _from: string
  _to: string
  _ids: BigNumber[]
  _amounts: BigNumber[]
}
export type TransferBatchEvent = TypedEvent<[string, string, string, BigNumber[], BigNumber[]], TransferBatchEventObject>

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>

export interface TransferSingleEventObject {
  _operator: string
  _from: string
  _to: string
  _id: BigNumber
  _amount: BigNumber
}
export type TransferSingleEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], TransferSingleEventObject>

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>

export interface NiftyswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: NiftyswapExchangeInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    balanceOf(_owner: PromiseOrValue<string>, _id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    getBuyPrice(
      _assetBoughtAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>

    getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>

    getCurrencyReserves(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[BigNumber[]]>

    getFactoryAddress(overrides?: CallOverrides): Promise<[string]>

    getPrice_currencyToToken(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensBought: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    getPrice_tokenToCurrency(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensSold: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    getSellPrice(
      _assetSoldAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>

    getTotalSupply(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[BigNumber[]]>

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOperator: boolean }>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>
  }

  balanceOf(_owner: PromiseOrValue<string>, _id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  balanceOfBatch(
    _owners: PromiseOrValue<string>[],
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getBuyPrice(
    _assetBoughtAmount: PromiseOrValue<BigNumberish>,
    _assetSoldReserve: PromiseOrValue<BigNumberish>,
    _assetBoughtReserve: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>

  getCurrencyReserves(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

  getFactoryAddress(overrides?: CallOverrides): Promise<string>

  getPrice_currencyToToken(
    _ids: PromiseOrValue<BigNumberish>[],
    _tokensBought: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getPrice_tokenToCurrency(
    _ids: PromiseOrValue<BigNumberish>[],
    _tokensSold: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getSellPrice(
    _assetSoldAmount: PromiseOrValue<BigNumberish>,
    _assetSoldReserve: PromiseOrValue<BigNumberish>,
    _assetBoughtReserve: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getTokenAddress(overrides?: CallOverrides): Promise<string>

  getTotalSupply(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

  isApprovedForAll(_owner: PromiseOrValue<string>, _operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  onERC1155Received(
    _operator: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  safeBatchTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _ids: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  safeTransferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    balanceOf(_owner: PromiseOrValue<string>, _id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getBuyPrice(
      _assetBoughtAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrencyInfo(overrides?: CallOverrides): Promise<[string, BigNumber]>

    getCurrencyReserves(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

    getFactoryAddress(overrides?: CallOverrides): Promise<string>

    getPrice_currencyToToken(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensBought: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getPrice_tokenToCurrency(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensSold: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getSellPrice(
      _assetSoldAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokenAddress(overrides?: CallOverrides): Promise<string>

    getTotalSupply(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    'ApprovalForAll(address,address,bool)'(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      _owner?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): ApprovalForAllEventFilter

    'CurrencyPurchase(address,address,uint256[],uint256[],uint256[])'(
      buyer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokensSoldIds?: null,
      tokensSoldAmounts?: null,
      currencyBoughtAmounts?: null
    ): CurrencyPurchaseEventFilter
    CurrencyPurchase(
      buyer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokensSoldIds?: null,
      tokensSoldAmounts?: null,
      currencyBoughtAmounts?: null
    ): CurrencyPurchaseEventFilter

    'LiquidityAdded(address,uint256[],uint256[],uint256[])'(
      provider?: PromiseOrValue<string> | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityAddedEventFilter
    LiquidityAdded(
      provider?: PromiseOrValue<string> | null,
      tokenIds?: null,
      tokenAmounts?: null,
      currencyAmounts?: null
    ): LiquidityAddedEventFilter

    'LiquidityRemoved(address,uint256[],uint256[],tuple[])'(
      provider?: PromiseOrValue<string> | null,
      tokenIds?: null,
      tokenAmounts?: null,
      details?: null
    ): LiquidityRemovedEventFilter
    LiquidityRemoved(
      provider?: PromiseOrValue<string> | null,
      tokenIds?: null,
      tokenAmounts?: null,
      details?: null
    ): LiquidityRemovedEventFilter

    'TokensPurchase(address,address,uint256[],uint256[],uint256[])'(
      buyer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokensBoughtIds?: null,
      tokensBoughtAmounts?: null,
      currencySoldAmounts?: null
    ): TokensPurchaseEventFilter
    TokensPurchase(
      buyer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokensBoughtIds?: null,
      tokensBoughtAmounts?: null,
      currencySoldAmounts?: null
    ): TokensPurchaseEventFilter

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _ids?: null,
      _amounts?: null
    ): TransferBatchEventFilter
    TransferBatch(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _ids?: null,
      _amounts?: null
    ): TransferBatchEventFilter

    'TransferSingle(address,address,address,uint256,uint256)'(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _id?: null,
      _amount?: null
    ): TransferSingleEventFilter
    TransferSingle(
      _operator?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _id?: null,
      _amount?: null
    ): TransferSingleEventFilter
  }

  estimateGas: {
    balanceOf(_owner: PromiseOrValue<string>, _id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBuyPrice(
      _assetBoughtAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrencyInfo(overrides?: CallOverrides): Promise<BigNumber>

    getCurrencyReserves(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>

    getFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>

    getPrice_currencyToToken(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensBought: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPrice_tokenToCurrency(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensSold: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSellPrice(
      _assetSoldAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>

    getTotalSupply(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBuyPrice(
      _assetBoughtAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCurrencyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrencyReserves(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>

    getFactoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPrice_currencyToToken(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensBought: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPrice_tokenToCurrency(
      _ids: PromiseOrValue<BigNumberish>[],
      _tokensSold: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSellPrice(
      _assetSoldAmount: PromiseOrValue<BigNumberish>,
      _assetSoldReserve: PromiseOrValue<BigNumberish>,
      _assetBoughtReserve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTotalSupply(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    safeBatchTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _ids: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    safeTransferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
