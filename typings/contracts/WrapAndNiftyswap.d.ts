/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WrapAndNiftyswapInterface extends Interface {
  functions: {
    erc1155: TypedFunctionDescription<{ encode([]: []): string }>;

    erc20: TypedFunctionDescription<{ encode([]: []): string }>;

    exchange: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, _amounts, _niftyswapOrder]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, , , ,]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    tokenWrapper: TypedFunctionDescription<{ encode([]: []): string }>;

    wrapAndSwap: TypedFunctionDescription<{
      encode([_maxAmount, _recipient, _niftyswapOrder]: [
        BigNumberish,
        string,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class WrapAndNiftyswap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WrapAndNiftyswap;
  attach(addressOrName: string): WrapAndNiftyswap;
  deployed(): Promise<WrapAndNiftyswap>;

  on(event: EventFilter | string, listener: Listener): WrapAndNiftyswap;
  once(event: EventFilter | string, listener: Listener): WrapAndNiftyswap;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): WrapAndNiftyswap;
  removeAllListeners(eventName: EventFilter | string): WrapAndNiftyswap;
  removeListener(eventName: any, listener: Listener): WrapAndNiftyswap;

  interface: WrapAndNiftyswapInterface;

  functions: {
    erc1155(): Promise<string>;

    erc20(): Promise<string>;

    exchange(): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _niftyswapOrder: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenWrapper(): Promise<string>;

    wrapAndSwap(
      _maxAmount: BigNumberish,
      _recipient: string,
      _niftyswapOrder: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  erc1155(): Promise<string>;

  erc20(): Promise<string>;

  exchange(): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _niftyswapOrder: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenWrapper(): Promise<string>;

  wrapAndSwap(
    _maxAmount: BigNumberish,
    _recipient: string,
    _niftyswapOrder: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    erc1155(): Promise<BigNumber>;

    erc20(): Promise<BigNumber>;

    exchange(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _niftyswapOrder: Arrayish
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: Arrayish
    ): Promise<BigNumber>;

    tokenWrapper(): Promise<BigNumber>;

    wrapAndSwap(
      _maxAmount: BigNumberish,
      _recipient: string,
      _niftyswapOrder: Arrayish
    ): Promise<BigNumber>;
  };
}
