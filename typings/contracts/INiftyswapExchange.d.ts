/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface INiftyswapExchangeInterface extends Interface {
  functions: {
    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    TokenPurchase: TypedEventDescription<{
      encodeTopics([buyer, baseTokeSold, tokensBought]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    BaseTokenPurchase: TypedEventDescription<{
      encodeTopics([buyer, tokensSold, baseTokensBought]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    AddLiquidity: TypedEventDescription<{
      encodeTopics([provider, baseTokenAmount, tokenAmount]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    RemoveLiquidity: TypedEventDescription<{
      encodeTopics([provider, baseTokenAmount, tokenAmount]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class INiftyswapExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): INiftyswapExchange;
  attach(addressOrName: string): INiftyswapExchange;
  deployed(): Promise<INiftyswapExchange>;

  on(event: EventFilter | string, listener: Listener): INiftyswapExchange;
  once(event: EventFilter | string, listener: Listener): INiftyswapExchange;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): INiftyswapExchange;
  removeAllListeners(eventName: EventFilter | string): INiftyswapExchange;
  removeListener(eventName: any, listener: Listener): INiftyswapExchange;

  interface: INiftyswapExchangeInterface;

  functions: {
    getBuyPrice(
      _assetBoughtAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish
    ): Promise<BigNumber>;

    getSellPrice(
      _assetSoldAmount: BigNumberish,
      _assetSoldReserve: BigNumberish,
      _assetBoughtReserve: BigNumberish
    ): Promise<BigNumber>;

    getPrice_baseToToken(
      _id: BigNumberish,
      _tokensBought: BigNumberish
    ): Promise<BigNumber>;

    getPrice_tokenToBase(
      _id: BigNumberish,
      _tokensSold: BigNumberish
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenAddress(): Promise<string>;
    factoryAddress(): Promise<string>;
  };

  filters: {
    TokenPurchase(
      buyer: string | null,
      baseTokeSold: BigNumberish | null,
      tokensBought: BigNumberish | null
    ): EventFilter;

    BaseTokenPurchase(
      buyer: string | null,
      tokensSold: BigNumberish | null,
      baseTokensBought: BigNumberish | null
    ): EventFilter;

    AddLiquidity(
      provider: string | null,
      baseTokenAmount: BigNumberish | null,
      tokenAmount: BigNumberish | null
    ): EventFilter;

    RemoveLiquidity(
      provider: string | null,
      baseTokenAmount: BigNumberish | null,
      tokenAmount: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;
  };
}
