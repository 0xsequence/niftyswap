/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface INiftyswapFactoryInterface extends Interface {
  functions: {
    createExchange: TypedFunctionDescription<{
      encode([_token]: [string]): string;
    }>;
  };

  events: {
    NewExchange: TypedEventDescription<{
      encodeTopics([token, exchange]: [string | null, string | null]): string[];
    }>;
  };
}

export class INiftyswapFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): INiftyswapFactory;
  attach(addressOrName: string): INiftyswapFactory;
  deployed(): Promise<INiftyswapFactory>;

  on(event: EventFilter | string, listener: Listener): INiftyswapFactory;
  once(event: EventFilter | string, listener: Listener): INiftyswapFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): INiftyswapFactory;
  removeAllListeners(eventName: EventFilter | string): INiftyswapFactory;
  removeListener(eventName: any, listener: Listener): INiftyswapFactory;

  interface: INiftyswapFactoryInterface;

  functions: {
    getExchange(_token: string): Promise<string>;

    getToken(_exchange: string): Promise<string>;

    createExchange(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  filters: {
    NewExchange(token: string | null, exchange: string | null): EventFilter;
  };

  estimate: {
    createExchange(_token: string): Promise<BigNumber>;
  };
}
